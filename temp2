
test2.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
    int a;
    int b;
    int c;
};

int main() {
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
    struct foo s;
    struct foo *f;
    int c;
    s.a= 5;
  1b:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%rbp)
    f = &s;
  22:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  26:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    s.b = 6;
  2a:	c7 45 f0 06 00 00 00 	movl   $0x6,-0x10(%rbp)
    s.c = 7;
  31:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%rbp)
    c = 2*f->c + f->a + f->b;
  38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3c:	8b 40 08             	mov    0x8(%rax),%eax
  3f:	8d 14 00             	lea    (%rax,%rax,1),%edx
  42:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  46:	8b 00                	mov    (%rax),%eax
  48:	01 c2                	add    %eax,%edx
  4a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4e:	8b 40 04             	mov    0x4(%rax),%eax
  51:	01 d0                	add    %edx,%eax
  53:	89 45 dc             	mov    %eax,-0x24(%rbp)

    printf(p,c);
  56:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 5d <main+0x5d>
			59: R_X86_64_PC32	p-0x4
  5d:	8b 55 dc             	mov    -0x24(%rbp),%edx
  60:	89 d6                	mov    %edx,%esi
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <main+0x6a>
			66: R_X86_64_PLT32	printf-0x4
    return 0;
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  6f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <main+0x83>
  7e:	e8 00 00 00 00       	callq  83 <main+0x83>
			7f: R_X86_64_PLT32	__stack_chk_fail-0x4
  83:	c9                   	leaveq 
  84:	c3                   	retq   

Disassembly of section .rodata:

0000000000000000 <.rodata>:
   0:	25                   	.byte 0x25
   1:	64 0a 00             	or     %fs:(%rax),%al

Disassembly of section .data.rel.local:

0000000000000000 <p>:
	...
			0: R_X86_64_64	.rodata

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
int main() {
   0:	d1 00                	roll   (%rax)
   2:	00 00                	add    %al,(%rax)
   4:	04 00                	add    $0x0,%al
   6:	00 00                	add    %al,(%rax)
			6: R_X86_64_32	.debug_abbrev
   8:	00 00                	add    %al,(%rax)
   a:	08 01                	or     %al,(%rcx)
   c:	00 00                	add    %al,(%rax)
			c: R_X86_64_32	.debug_str
   e:	00 00                	add    %al,(%rax)
  10:	01 00                	add    %eax,(%rax)
			11: R_X86_64_32	.debug_str+0xcf
	...
			15: R_X86_64_32	.debug_str+0xa4
			19: R_X86_64_64	.text
    s.a= 5;
  1e:	00 00                	add    %al,(%rax)
  20:	00 85 00 00 00 00    	add    %al,0x0(%rbp)
    f = &s;
  26:	00 00                	add    %al,(%rax)
  28:	00 00                	add    %al,(%rax)
			29: R_X86_64_32	.debug_line
    s.b = 6;
  2a:	00 00                	add    %al,(%rax)
  2c:	00 02                	add    %al,(%rdx)
  2e:	70 00                	jo     30 <.debug_info+0x30>
  30:	01 04 07             	add    %eax,(%rdi,%rax,1)
    s.c = 7;
  33:	41 00 00             	add    %al,(%r8)
  36:	00 09                	add    %cl,(%rcx)
    c = 2*f->c + f->a + f->b;
  38:	03 00                	add    (%rax),%eax
			39: R_X86_64_64	p
  3a:	00 00                	add    %al,(%rax)
  3c:	00 00                	add    %al,(%rax)
  3e:	00 00                	add    %al,(%rax)
  40:	00 03                	add    %al,(%rbx)
  42:	08 47 00             	or     %al,0x0(%rdi)
  45:	00 00                	add    %al,(%rax)
  47:	04 01                	add    $0x1,%al
  49:	06                   	(bad)  
  4a:	00 00                	add    %al,(%rax)
			4a: R_X86_64_32	.debug_str+0x9f
  4c:	00 00                	add    %al,(%rax)
  4e:	05 66 6f 6f 00       	add    $0x6f6f66,%eax
  53:	0c 01                	or     $0x1,%al
  55:	06                   	(bad)  
    printf(p,c);
  56:	08 7d 00             	or     %bh,0x0(%rbp)
  59:	00 00                	add    %al,(%rax)
  5b:	06                   	(bad)  
  5c:	61                   	(bad)  
  5d:	00 01                	add    %al,(%rcx)
  5f:	07                   	(bad)  
  60:	09 7d 00             	or     %edi,0x0(%rbp)
  63:	00 00                	add    %al,(%rax)
  65:	00 06                	add    %al,(%rsi)
  67:	62                   	(bad)  
  68:	00 01                	add    %al,(%rcx)
    return 0;
  6a:	08 09                	or     %cl,(%rcx)
  6c:	7d 00                	jge    6e <.debug_info+0x6e>
  6e:	00 00                	add    %al,(%rax)
}
  70:	04 06                	add    $0x6,%al
  72:	63 00                	movslq (%rax),%eax
  74:	01 09                	add    %ecx,(%rcx)
  76:	09 7d 00             	or     %edi,0x0(%rbp)
  79:	00 00                	add    %al,(%rax)
  7b:	08 00                	or     %al,(%rax)
  7d:	07                   	(bad)  
  7e:	04 05                	add    $0x5,%al
  80:	69 6e 74 00 08 00 00 	imul   $0x800,0x74(%rsi),%ebp
			85: R_X86_64_32	.debug_str+0x9a
  87:	00 00                	add    %al,(%rax)
  89:	01 0c 05 7d 00 00 00 	add    %ecx,0x7d(,%rax,1)
	...
			90: R_X86_64_64	.text
  98:	85 00                	test   %eax,(%rax)
  9a:	00 00                	add    %al,(%rax)
  9c:	00 00                	add    %al,(%rax)
  9e:	00 00                	add    %al,(%rax)
  a0:	01 9c ce 00 00 00 09 	add    %ebx,0x9000000(%rsi,%rcx,8)
  a7:	73 00                	jae    a9 <.debug_info+0xa9>
  a9:	01 0d 10 4e 00 00    	add    %ecx,0x4e10(%rip)        # 4ebf <main+0x4ebf>
  af:	00 02                	add    %al,(%rdx)
  b1:	91                   	xchg   %eax,%ecx
  b2:	5c                   	pop    %rsp
  b3:	09 66 00             	or     %esp,0x0(%rsi)
  b6:	01 0e                	add    %ecx,(%rsi)
  b8:	11 ce                	adc    %ecx,%esi
  ba:	00 00                	add    %al,(%rax)
  bc:	00 02                	add    %al,(%rdx)
  be:	91                   	xchg   %eax,%ecx
  bf:	50                   	push   %rax
  c0:	09 63 00             	or     %esp,0x0(%rbx)
  c3:	01 0f                	add    %ecx,(%rdi)
  c5:	09 7d 00             	or     %edi,0x0(%rbp)
  c8:	00 00                	add    %al,(%rax)
  ca:	02 91 4c 00 03 08    	add    0x803004c(%rcx),%dl
  d0:	4e 00 00             	rex.WRX add %r8b,(%rax)
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
int main() {
   0:	01 11                	add    %edx,(%rcx)
   2:	01 25 0e 13 0b 03    	add    %esp,0x30b130e(%rip)        # 30b1316 <main+0x30b1316>
   8:	0e                   	(bad)  
   9:	1b 0e                	sbb    (%rsi),%ecx
   b:	11 01                	adc    %eax,(%rcx)
   d:	12 07                	adc    (%rdi),%al
   f:	10 17                	adc    %dl,(%rdi)
  11:	00 00                	add    %al,(%rax)
  13:	02 34 00             	add    (%rax,%rax,1),%dh
  16:	03 08                	add    (%rax),%ecx
  18:	3a 0b                	cmp    (%rbx),%cl
  1a:	3b 0b                	cmp    (%rbx),%ecx
    s.a= 5;
  1c:	39 0b                	cmp    %ecx,(%rbx)
  1e:	49 13 3f             	adc    (%r15),%rdi
  21:	19 02                	sbb    %eax,(%rdx)
    f = &s;
  23:	18 00                	sbb    %al,(%rax)
  25:	00 03                	add    %al,(%rbx)
  27:	0f 00 0b             	str    (%rbx)
    s.b = 6;
  2a:	0b 49 13             	or     0x13(%rcx),%ecx
  2d:	00 00                	add    %al,(%rax)
  2f:	04 24                	add    $0x24,%al
    s.c = 7;
  31:	00 0b                	add    %cl,(%rbx)
  33:	0b 3e                	or     (%rsi),%edi
  35:	0b 03                	or     (%rbx),%eax
  37:	0e                   	(bad)  
    c = 2*f->c + f->a + f->b;
  38:	00 00                	add    %al,(%rax)
  3a:	05 13 01 03 08       	add    $0x8030113,%eax
  3f:	0b 0b                	or     (%rbx),%ecx
  41:	3a 0b                	cmp    (%rbx),%cl
  43:	3b 0b                	cmp    (%rbx),%ecx
  45:	39 0b                	cmp    %ecx,(%rbx)
  47:	01 13                	add    %edx,(%rbx)
  49:	00 00                	add    %al,(%rax)
  4b:	06                   	(bad)  
  4c:	0d 00 03 08 3a       	or     $0x3a080300,%eax
  51:	0b 3b                	or     (%rbx),%edi
  53:	0b 39                	or     (%rcx),%edi
  55:	0b 49 13             	or     0x13(%rcx),%ecx
    printf(p,c);
  58:	38 0b                	cmp    %cl,(%rbx)
  5a:	00 00                	add    %al,(%rax)
  5c:	07                   	(bad)  
  5d:	24 00                	and    $0x0,%al
  5f:	0b 0b                	or     (%rbx),%ecx
  61:	3e 0b 03             	or     %ds:(%rbx),%eax
  64:	08 00                	or     %al,(%rax)
  66:	00 08                	add    %cl,(%rax)
  68:	2e 01 3f             	add    %edi,%cs:(%rdi)
    return 0;
  6b:	19 03                	sbb    %eax,(%rbx)
  6d:	0e                   	(bad)  
  6e:	3a 0b                	cmp    (%rbx),%cl
}
  70:	3b 0b                	cmp    (%rbx),%ecx
  72:	39 0b                	cmp    %ecx,(%rbx)
  74:	49 13 11             	adc    (%r9),%rdx
  77:	01 12                	add    %edx,(%rdx)
  79:	07                   	(bad)  
  7a:	40 18 96 42 19 01 13 	sbb    %dl,0x13011942(%rsi)
  81:	00 00                	add    %al,(%rax)
  83:	09 34 00             	or     %esi,(%rax,%rax,1)
  86:	03 08                	add    (%rax),%ecx
  88:	3a 0b                	cmp    (%rbx),%cl
  8a:	3b 0b                	cmp    (%rbx),%ecx
  8c:	39 0b                	cmp    %ecx,(%rbx)
  8e:	49 13 02             	adc    (%r10),%rax
  91:	18 00                	sbb    %al,(%rax)
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
int main() {
   0:	2c 00                	sub    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	02 00                	add    (%rax),%al
   6:	00 00                	add    %al,(%rax)
			6: R_X86_64_32	.debug_info
   8:	00 00                	add    %al,(%rax)
   a:	08 00                	or     %al,(%rax)
	...
			10: R_X86_64_64	.text
  18:	85 00                	test   %eax,(%rax)
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
   0:	66 00 00             	data16 add %al,(%rax)
   3:	00 03                	add    %al,(%rbx)
   5:	00 24 00             	add    %ah,(%rax,%rax,1)
   8:	00 00                	add    %al,(%rax)
   a:	01 01                	add    %eax,(%rcx)
   c:	fb                   	sti    
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     $0x1010100,%eax
  13:	01 00                	add    %eax,(%rax)
  15:	00 00                	add    %al,(%rax)
  17:	01 00                	add    %eax,(%rax)
  19:	00 01                	add    %al,(%rcx)
    s.a= 5;
  1b:	74 65                	je     82 <main+0x82>
  1d:	73 74                	jae    93 <main+0x93>
  1f:	73 00                	jae    21 <.debug_line+0x21>
  21:	00 74 65 73          	add    %dh,0x73(%rbp,%riz,2)
    f = &s;
  25:	74 32                	je     59 <.debug_line+0x59>
  27:	2e 63 00             	movslq %cs:(%rax),%eax
    s.b = 6;
  2a:	01 00                	add    %eax,(%rax)
  2c:	00 00                	add    %al,(%rax)
  2e:	05 0c 00 09 02       	add    $0x209000c,%eax
	...
			33: R_X86_64_64	.text
    c = 2*f->c + f->a + f->b;
  3b:	03 0b                	add    (%rbx),%ecx
  3d:	01 ba 05 08 e8 05    	add    %edi,0x5e80805(%rdx)
  43:	07                   	(bad)  
  44:	75 05                	jne    4b <.debug_line+0x4b>
  46:	09 83 75 05 0c 75    	or     %eax,0x750c0575(%rbx)
  4c:	05 0a 74 05 13       	add    $0x1305740a,%eax
  51:	3c 05                	cmp    $0x5,%al
  53:	10 66 05             	adc    %ah,0x5(%rsi)
    printf(p,c);
  56:	1a 2e                	sbb    (%rsi),%ch
  58:	05 07 74 05 05       	add    $0x5057407,%eax
  5d:	5a                   	pop    %rdx
  5e:	05 0c 08 3d 05       	add    $0x53d080c,%eax
  63:	01 59 02             	add    %ebx,0x2(%rcx)
  66:	16                   	(bad)  
  67:	00 01                	add    %al,(%rcx)
  69:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
int main() {
   0:	47                   	rex.RXB
   1:	4e 55                	rex.WRX push %rbp
   3:	20 43 38             	and    %al,0x38(%rbx)
   6:	39 20                	cmp    %esp,(%rax)
   8:	39 2e                	cmp    %ebp,(%rsi)
   a:	33 2e                	xor    (%rsi),%ebp
   c:	30 20                	xor    %ah,(%rax)
   e:	2d 6d 74 75 6e       	sub    $0x6e75746d,%eax
  13:	65 3d 67 65 6e 65    	gs cmp $0x656e6567,%eax
  19:	72 69                	jb     84 <.debug_str+0x84>
    s.a= 5;
  1b:	63 20                	movslq (%rax),%esp
  1d:	2d 6d 61 72 63       	sub    $0x6372616d,%eax
    f = &s;
  22:	68 3d 78 38 36       	pushq  $0x3638783d
  27:	2d 36 34 20 2d       	sub    $0x2d203436,%eax
    s.b = 6;
  2c:	67 20 2d 4f 30 20 2d 	and    %ch,0x2d20304f(%eip)        # 2d203082 <main+0x2d203082>
    s.c = 7;
  33:	61                   	(bad)  
  34:	6e                   	outsb  %ds:(%rsi),(%dx)
  35:	73 69                	jae    a0 <.debug_str+0xa0>
  37:	20 2d 66 6e 6f 2d    	and    %ch,0x2d6f6e66(%rip)        # 2d6f6ea3 <main+0x2d6f6ea3>
    c = 2*f->c + f->a + f->b;
  3d:	61                   	(bad)  
  3e:	73 79                	jae    b9 <.debug_str+0xb9>
  40:	6e                   	outsb  %ds:(%rsi),(%dx)
  41:	63 68 72             	movslq 0x72(%rax),%ebp
  44:	6f                   	outsl  %ds:(%rsi),(%dx)
  45:	6e                   	outsb  %ds:(%rsi),(%dx)
  46:	6f                   	outsl  %ds:(%rsi),(%dx)
  47:	75 73                	jne    bc <.debug_str+0xbc>
  49:	2d 75 6e 77 69       	sub    $0x69776e75,%eax
  4e:	6e                   	outsb  %ds:(%rsi),(%dx)
  4f:	64 2d 74 61 62 6c    	fs sub $0x6c626174,%eax
  55:	65 73 20             	gs jae 78 <.debug_str+0x78>
    printf(p,c);
  58:	2d 66 73 74 61       	sub    $0x61747366,%eax
  5d:	63 6b 2d             	movslq 0x2d(%rbx),%ebp
  60:	70 72                	jo     d4 <.debug_str+0xd4>
  62:	6f                   	outsl  %ds:(%rsi),(%dx)
  63:	74 65                	je     ca <.debug_str+0xca>
  65:	63 74 6f 72          	movslq 0x72(%rdi,%rbp,2),%esi
  69:	2d 73 74 72 6f       	sub    $0x6f727473,%eax
    return 0;
  6e:	6e                   	outsb  %ds:(%rsi),(%dx)
}
  6f:	67 20 2d 66 73 74 61 	and    %ch,0x61747366(%eip)        # 617473dc <main+0x617473dc>
  76:	63 6b 2d             	movslq 0x2d(%rbx),%ebp
  79:	63 6c 61 73          	movslq 0x73(%rcx,%riz,2),%ebp
  7d:	68 2d 70 72 6f       	pushq  $0x6f72702d
  82:	74 65                	je     e9 <main+0xe9>
  84:	63 74 69 6f          	movslq 0x6f(%rcx,%rbp,2),%esi
  88:	6e                   	outsb  %ds:(%rsi),(%dx)
  89:	20 2d 66 63 66 2d    	and    %ch,0x2d666366(%rip)        # 2d6663f5 <main+0x2d6663f5>
  8f:	70 72                	jo     103 <main+0x103>
  91:	6f                   	outsl  %ds:(%rsi),(%dx)
  92:	74 65                	je     f9 <main+0xf9>
  94:	63 74 69 6f          	movslq 0x6f(%rcx,%rbp,2),%esi
  98:	6e                   	outsb  %ds:(%rsi),(%dx)
  99:	00 6d 61             	add    %ch,0x61(%rbp)
  9c:	69 6e 00 63 68 61 72 	imul   $0x72616863,0x0(%rsi),%ebp
  a3:	00 2f                	add    %ch,(%rdi)
  a5:	68 6f 6d 65 2f       	pushq  $0x2f656d6f
  aa:	73 61                	jae    10d <main+0x10d>
  ac:	6b 73 68 69          	imul   $0x69,0x68(%rbx),%esi
  b0:	2f                   	(bad)  
  b1:	70 72                	jo     125 <main+0x125>
  b3:	6f                   	outsl  %ds:(%rsi),(%dx)
  b4:	6a 65                	pushq  $0x65
  b6:	63 74 2d 33          	movslq 0x33(%rbp,%rbp,1),%esi
  ba:	33 35 2f 63 6f 64    	xor    0x646f632f(%rip),%esi        # 646f63ef <main+0x646f63ef>
  c0:	61                   	(bad)  
  c1:	67 61                	addr32 (bad) 
  c3:	6d                   	insl   (%dx),%es:(%rdi)
  c4:	69 5f 63 6f 6d 70 69 	imul   $0x69706d6f,0x63(%rdi),%ebx
  cb:	6c                   	insb   (%dx),%es:(%rdi)
  cc:	65 72 00             	gs jb  cf <.debug_str+0xcf>
  cf:	74 65                	je     136 <main+0x136>
  d1:	73 74                	jae    147 <main+0x147>
  d3:	73 2f                	jae    104 <main+0x104>
  d5:	74 65                	je     13c <main+0x13c>
  d7:	73 74                	jae    14d <main+0x14d>
  d9:	32 2e                	xor    (%rsi),%ch
  db:	63 00                	movslq (%rax),%eax

Disassembly of section .comment:

0000000000000000 <.comment>:
int main() {
   0:	00 47 43             	add    %al,0x43(%rdi)
   3:	43 3a 20             	rex.XB cmp (%r8),%spl
   6:	28 55 62             	sub    %dl,0x62(%rbp)
   9:	75 6e                	jne    79 <main+0x79>
   b:	74 75                	je     82 <main+0x82>
   d:	20 39                	and    %bh,(%rcx)
   f:	2e 33 2e             	xor    %cs:(%rsi),%ebp
  12:	30 2d 31 37 75 62    	xor    %ch,0x62753731(%rip)        # 62753749 <main+0x62753749>
  18:	75 6e                	jne    88 <main+0x88>
  1a:	74 75                	je     91 <main+0x91>
    s.a= 5;
  1c:	31 7e 32             	xor    %edi,0x32(%rsi)
  1f:	30 2e                	xor    %ch,(%rsi)
  21:	30 34 29             	xor    %dh,(%rcx,%rbp,1)
    f = &s;
  24:	20 39                	and    %bh,(%rcx)
  26:	2e 33 2e             	xor    %cs:(%rsi),%ebp
  29:	30 00                	xor    %al,(%rax)

Disassembly of section .note.gnu.property:

0000000000000000 <.note.gnu.property>:
   0:	04 00                	add    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	10 00                	adc    %al,(%rax)
   6:	00 00                	add    %al,(%rax)
   8:	05 00 00 00 47       	add    $0x47000000,%eax
   d:	4e 55                	rex.WRX push %rbp
   f:	00 02                	add    %al,(%rdx)
  11:	00 00                	add    %al,(%rax)
  13:	c0 04 00 00          	rolb   $0x0,(%rax,%rax,1)
  17:	00 03                	add    %al,(%rbx)
  19:	00 00                	add    %al,(%rax)
  1b:	00 00                	add    %al,(%rax)
  1d:	00 00                	add    %al,(%rax)
	...

Disassembly of section .debug_frame:

0000000000000000 <.debug_frame>:
int main() {
   0:	14 00                	adc    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	ff                   	(bad)  
   5:	ff                   	(bad)  
   6:	ff                   	(bad)  
   7:	ff 01                	incl   (%rcx)
   9:	00 01                	add    %al,(%rcx)
   b:	78 10                	js     1d <.debug_frame+0x1d>
   d:	0c 07                	or     $0x7,%al
   f:	08 90 01 00 00 00    	or     %dl,0x1(%rax)
  15:	00 00                	add    %al,(%rax)
  17:	00 24 00             	add    %ah,(%rax,%rax,1)
	...
			1c: R_X86_64_32	.debug_frame
			20: R_X86_64_64	.text
    f = &s;
  26:	00 00                	add    %al,(%rax)
  28:	85 00                	test   %eax,(%rax)
    s.b = 6;
  2a:	00 00                	add    %al,(%rax)
  2c:	00 00                	add    %al,(%rax)
  2e:	00 00                	add    %al,(%rax)
  30:	45 0e                	rex.RB (bad) 
    s.c = 7;
  32:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
    c = 2*f->c + f->a + f->b;
  38:	02 7c 0c 07          	add    0x7(%rsp,%rcx,1),%bh
  3c:	08 00                	or     %al,(%rax)
	...
