    Token          		 Lexeme                             		    Line#	  Column#

    STRUCT         		 struct                             		        1	        1
    IDENTIFIER     		 node                               		        1	        8
    {              		 {                                  		        1	       12
    INT            		 int                                		        2	        5
    IDENTIFIER     		 val                                		        2	        9
    ;              		 ;                                  		        2	       12
    STRUCT         		 struct                             		        3	        5
    IDENTIFIER     		 node                               		        3	       12
    *              		 *                                  		        3	       16
    IDENTIFIER     		 next                               		        3	       18
    ;              		 ;                                  		        3	       22
    }              		 }                                  		        4	        1
    IDENTIFIER     		 node                               		        4	        2
    ;              		 ;                                  		        4	        6
    VOID           		 void                               		        6	        1
    IDENTIFIER     		 printLinkedList                    		        6	        6
    (              		 (                                  		        6	       21
    STRUCT         		 struct                             		        6	       22
    IDENTIFIER     		 node                               		        6	       29
    *              		 *                                  		        6	       33
    IDENTIFIER     		 head                               		        6	       35
    )              		 )                                  		        6	       39
    {              		 {                                  		        6	       40
    IF             		 if                                 		        7	        5
    (              		 (                                  		        7	        8
    IDENTIFIER     		 head                               		        7	        9
    EQ_OP          		 ==                                 		        7	       14
    IDENTIFIER     		 NULL                               		        7	       17
    )              		 )                                  		        7	       21
    {              		 {                                  		        7	       23
    RETURN         		 return                             		        8	        9
    ;              		 ;                                  		        8	       15
    }              		 }                                  		        9	        5
    IDENTIFIER     		 printf                             		       10	        5
    (              		 (                                  		       10	       11
    STRING_LITERAL 		 "%d\n"                             		       10	       12
    ,              		 ,                                  		       10	       18
    IDENTIFIER     		 head                               		       10	       20
    PTR_OP         		 ->                                 		       10	       24
    IDENTIFIER     		 val                                		       10	       26
    )              		 )                                  		       10	       29
    ;              		 ;                                  		       10	       30
    IDENTIFIER     		 printLinkedList                    		       11	        5
    (              		 (                                  		       11	       20
    IDENTIFIER     		 head                               		       11	       21
    PTR_OP         		 ->                                 		       11	       25
    IDENTIFIER     		 next                               		       11	       27
    )              		 )                                  		       11	       31
    ;              		 ;                                  		       11	       32
    }              		 }                                  		       12	        1
    INT            		 int                                		       14	        1
    IDENTIFIER     		 main                               		       14	        5
    (              		 (                                  		       14	        9
    )              		 )                                  		       14	       10
    {              		 {                                  		       14	       12
    INT            		 int                                		       15	        5
    IDENTIFIER     		 n                                  		       15	        9
    =              		 =                                  		       15	       11
    CONSTANT       		 10                                 		       15	       13
    ;              		 ;                                  		       15	       15
    STRUCT         		 struct                             		       16	        5
    IDENTIFIER     		 node                               		       16	       12
    *              		 *                                  		       16	       16
    IDENTIFIER     		 head                               		       16	       18
    =              		 =                                  		       16	       23
    IDENTIFIER     		 NULL                               		       16	       25
    ;              		 ;                                  		       16	       29
    STRUCT         		 struct                             		       17	        5
    IDENTIFIER     		 node                               		       17	       12
    *              		 *                                  		       17	       16
    IDENTIFIER     		 prev                               		       17	       18
    =              		 =                                  		       17	       23
    IDENTIFIER     		 NULL                               		       17	       25
    ;              		 ;                                  		       17	       29
    FOR            		 for                                		       18	        5
    (              		 (                                  		       18	        8
    INT            		 int                                		       18	        9
    IDENTIFIER     		 i                                  		       18	       13
    =              		 =                                  		       18	       15
    CONSTANT       		 0                                  		       18	       17
    ;              		 ;                                  		       18	       18
    IDENTIFIER     		 i                                  		       18	       19
    <              		 <                                  		       18	       20
    IDENTIFIER     		 n                                  		       18	       21
    ;              		 ;                                  		       18	       22
    IDENTIFIER     		 i                                  		       18	       23
    INC_OP         		 ++                                 		       18	       24
    )              		 )                                  		       18	       26
    {              		 {                                  		       18	       27
    STRUCT         		 struct                             		       19	        9
    IDENTIFIER     		 node                               		       19	       16
    *              		 *                                  		       19	       20
    IDENTIFIER     		 curr                               		       19	       22
    =              		 =                                  		       19	       27
    (              		 (                                  		       19	       29
    STRUCT         		 struct                             		       19	       30
    IDENTIFIER     		 node                               		       19	       37
    *              		 *                                  		       19	       41
    )              		 )                                  		       19	       42
    IDENTIFIER     		 malloc                             		       19	       43
    (              		 (                                  		       19	       49
    SIZEOF         		 sizeof                             		       19	       50
    (              		 (                                  		       19	       56
    IDENTIFIER     		 node                               		       19	       57
    )              		 )                                  		       19	       61
    )              		 )                                  		       19	       62
    ;              		 ;                                  		       19	       63
    IDENTIFIER     		 curr                               		       20	        9
    PTR_OP         		 ->                                 		       20	       13
    IDENTIFIER     		 val                                		       20	       15
    =              		 =                                  		       20	       19
    IDENTIFIER     		 i                                  		       20	       21
    ;              		 ;                                  		       20	       22
    IDENTIFIER     		 curr                               		       21	        9
    PTR_OP         		 ->                                 		       21	       13
    IDENTIFIER     		 next                               		       21	       15
    =              		 =                                  		       21	       20
    IDENTIFIER     		 NULL                               		       21	       22
    ;              		 ;                                  		       21	       26
    IF             		 if                                 		       22	        9
    (              		 (                                  		       22	       12
    IDENTIFIER     		 prev                               		       22	       13
    EQ_OP          		 ==                                 		       22	       18
    IDENTIFIER     		 NULL                               		       22	       21
    )              		 )                                  		       22	       25
    {              		 {                                  		       22	       27
    IDENTIFIER     		 head                               		       23	       13
    =              		 =                                  		       23	       18
    IDENTIFIER     		 curr                               		       23	       20
    ;              		 ;                                  		       23	       24
    IDENTIFIER     		 prev                               		       24	       13
    =              		 =                                  		       24	       18
    IDENTIFIER     		 curr                               		       24	       20
    ;              		 ;                                  		       24	       24
    }              		 }                                  		       25	        9
    ELSE           		 else                               		       25	       11
    {              		 {                                  		       25	       16
    IDENTIFIER     		 prev                               		       26	       13
    PTR_OP         		 ->                                 		       26	       17
    IDENTIFIER     		 next                               		       26	       19
    =              		 =                                  		       26	       24
    IDENTIFIER     		 curr                               		       26	       26
    ;              		 ;                                  		       26	       30
    }              		 }                                  		       27	        9
    IDENTIFIER     		 prev                               		       28	        9
    =              		 =                                  		       28	       14
    IDENTIFIER     		 curr                               		       28	       16
    ;              		 ;                                  		       28	       20
    }              		 }                                  		       29	        5
    IDENTIFIER     		 printLinkedList                    		       30	        5
    (              		 (                                  		       30	       20
    IDENTIFIER     		 head                               		       30	       21
    )              		 )                                  		       30	       25
    ;              		 ;                                  		       30	       26
    RETURN         		 return                             		       31	        5
    CONSTANT       		 0                                  		       31	       12
    ;              		 ;                                  		       31	       13
    }              		 }                                  		       32	        1
